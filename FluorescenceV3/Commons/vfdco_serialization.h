/*MIT License

Copyright (c) The VFD Collective, Frank from The VFD Collective (Fu Zheng)
Date: 04/25/2020

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.*/

/**
  ******************************************************************************
  * @file     vfdco_serialization.h
  * @author   The VFD Collective, Frank from The VFD Collective (Fu Zheng)
  * @version  V1.0
  * @date     04-February-2020
  * @brief    This file contains declarations for the serialization protocol
  *           used in Fluorescence by The VFD Collective
  ******************************************************************************
 **/

#ifdef __cplusplus
extern "C" {
#endif

#ifndef _VFDCO_SERIALIZATION_H
#define _VFDCO_SERIALIZATION_H

#include <stdint.h>
#include "vfdco_config.h"

/**
 * @brief Possible states of the serial protocol
 * 0 if no problems, > 0 otherwise, and should trigger a restore of default settings
 */
typedef enum {
  // Everything's good
  SERIALIZATION_HEADER_STATUS_OK = 0,
  // The two bytes of vfdco_1 and vfdco_2 are wrong. Should trigger default writing
  SERIALIZATION_HEADER_STATUS_FORMAT_MISMATCH = 50,
  // HW version of read doesn't comply to HW_STR in CONFIG. Should trigger default writing
  SERIALIZATION_HEADER_STATUS_HW_MISMATCH = 51,
  // SW version of read doesn't comply to SW_STR in CONFIG. Should trigger change mapping
  SERIALIZATION_HEADER_STATUS_SW_MISMATCH = 52,
  // data_container_length == 0 or value not reasonable (very large). Should trigger default writing
  SERIALIZATION_HEADER_STATUS_DATA_LENGTH_ERR = 53,
  // Data error. File not large enough?
  SERIALIZATION_HEADER_STATUS_DATA_ERR = 60
} SERIALIZATION_HEADER_STATUS_t;

/**
 * @brief Structure of a serialization file generated by Fluorescence
 */
struct Serialization_Header {
  uint8_t vfdco_1, vfdco_2;
  uint8_t sw_str[CONFIG_SW_STRING_LENGTH];
  uint8_t hw_str[CONFIG_HW_STRING_LENGTH];
  uint16_t data_container_length;
};

/**
 * @brief Write given array data of setting arrays to serialization device
 * @param data Array of setting arrays
 * @param length_arr Array contains length information for each setting array
 * @param length_arr_length Length information of array
 */
void vfdco_serialization_write(uint8_t *const data[], const uint8_t *length_arr, const uint8_t length_arr_length);

/**
 * @brief Read in setting arrays from serialization device to given array data
 * @param data Array of setting arrays
 * @param length_arr Array contains length information for each setting array
 * @param length_arr_length Length information of array
 * @return SERIALIZATION_HEADER_STATUS_t Read in status as in enum SERIALIZATION_HEADER_STATUS_t in vfdco_serialization.h
 */
SERIALIZATION_HEADER_STATUS_t vfdco_serialization_read(uint8_t *const data[], const uint8_t *length_arr, const uint8_t length_arr_length);

#endif

#ifdef __cplusplus
}
#endif
